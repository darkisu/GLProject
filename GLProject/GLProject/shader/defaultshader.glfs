#version 440 core

//Default Variables
in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;
in vec4 depthPos;

uniform sampler2D texture_diffuse1;
uniform sampler2DShadow depthTexture;
uniform sampler3D LPV00;
uniform sampler3D LPVn11;
uniform sampler3D LPV01;
uniform sampler3D LPVp11;
uniform vec3 Ka;
uniform vec3 Kd;
uniform vec3 Ks;
uniform vec3 lowerbound;
uniform vec3 bboxlength;
uniform float LPVres;
uniform float LPVsize;
uniform vec3 eyepoint;

//----------------

layout (location = 0) out vec3 color;

uniform vec3 LightPos;
uniform vec3 LightColor;
uniform vec3 ViewPos;


void main()
{    
    vec4 ObjectColor = texture(texture_diffuse1, TexCoords);

    //ambient
    vec3 ambient = 0.1 * LightColor;      //tuned for sponza.obj
    //vec3 ambient = Ka * LightColor;  

    //diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPos - FragPos);
    float diff = abs(dot(norm, lightDir));
    vec3 diffuse = diff * 1.0 * LightColor;      //tuned for sponza.obj
    //vec3 diffuse = diff * Kd * LightColor;


    // Specular
    vec3 viewDir = normalize(ViewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(abs(dot(viewDir, reflectDir)), 32);
    vec3 specular = Ks * spec * LightColor;  

	//shadow

	float bias = 0.01f;
	vec4 shadowPos = vec4(depthPos.xy, depthPos.z - bias, depthPos.w);

	float isShadow = textureProj(depthTexture, shadowPos);
	//isShadow = isShadow > 0 ? 1.0f : 0.0f;
	vec3 dir;
	//if (dot(eyepoint - FragPos, Normal) < 0 )
		//dir = normalize( -Normal );
	//else
		dir = normalize( -Normal );
	
	vec4 coeffs = vec4(0.2820947918, (-0.4886025119) * dir.y, (0.4886025119) * dir.z, (-0.4886025119) * dir.x);
	vec3 align = FragPos - lowerbound;
	align = align / LPVsize;
	align = align / LPVres;


	vec3 indirect = clamp((coeffs.x * texture(LPV00, align).xyz + coeffs.y * texture(LPVn11, align).xyz + coeffs.z * texture(LPV01, align).xyz + coeffs.w * texture(LPVp11, align).xyz)/distance(coeffs, vec4(0.0)),0.0,1.0);
	indirect *= 3.14;
	indirect = clamp(indirect,0.0, 1.0);
	//indirect *= 0;



    vec3 result  =  (ambient + isShadow * (diffuse + specular) + indirect)* vec3(ObjectColor) ;  
    color = result ;
	//color = indirect + ambient;
	//color= vec3(1.0f);
}